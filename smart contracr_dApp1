// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;

contract Bank{


    string public bank_name = "FinTech Bank";
    string public bank_address = "123 Street";
    address owner;

    uint256 bankBalance = 0;
    uint number_of_accounts = 0;


    struct BankAccount {
        uint customer_id;
        string full_name;
        string profession;
        string dateofBirth;
        address wallet;
    }

    BankAccount[] bankAccounts;

    mapping(address=>uint256) public account_balances;
    mapping(address=>uint) account_info_map;

    modifier onlyRegistered(){
        require(account_info_map[msg.sender] > 0, "Account not exists!");
        _;
    }

    constructor(){
         owner = msg.sender;
    }


 
    function register_account(string memory _full_name,
                              string memory _profession, 
                              string memory _dateofBirth) external returns(bool) {

        require(account_info_map[msg.sender] == 0, "Account Already exists!");

        number_of_accounts += 1;

        BankAccount memory my_account = BankAccount({
            customer_id: number_of_accounts,
            full_name: _full_name,
            profession: _profession,
            dateofBirth: _dateofBirth,
            wallet: msg.sender});

        bankAccounts.push(my_account);
        account_info_map[msg.sender] = number_of_accounts;
        return true;
    }
    
    
    function transfer(uint256 amount, address acctToTransfer) onlyRegistered external{
        require(account_info_map[acctToTransfer] != 0, "To account not there!");
        account_balances[msg.sender] -= amount;
        account_balances[acctToTransfer] += amount;
    }


    function withdraw(uint256 amount) onlyRegistered external {
        require(account_balances[msg.sender] >= amount, "Account balance NOT Enough!");
        account_balances[msg.sender] -= amount;
        bankBalance -= amount;
        payable(msg.sender).transfer(amount);
    }
    
    receive() onlyRegistered external payable{
       account_balances[msg.sender] += msg.value;
       bankBalance += msg.value;
    }

}
